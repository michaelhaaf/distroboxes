FROM cgr.dev/chainguard/wolfi-base:latest
# Thanks to Nuno do Carmo for the initial prototype

LABEL com.github.containers.toolbox="true" \
    usage="This image is meant to be used with the Toolbox or Distrobox command" \
    summary="My personal Wolfi distrobox image" \
    maintainer="michael.haaf@gmail.com"

ARG IMAGE_NAME="${IMAGE_NAME:-cli}"

COPY ./toolboxes/cli/packages.cli \
    ./toolboxes/cli/packages.cli-dx \
    ./toolboxes/cli/packages.custom \
    /tmp/

COPY ./toolboxes/cli/files /

# Update image
RUN apk update && \
    apk upgrade

# Add optional packages
RUN grep -v '^#' /tmp/packages.cli | xargs apk add && \
    grep -v '^#' /tmp/packages.custom | xargs apk add && \
    if [[ "${IMAGE_NAME}" =~ "dx" ]]; then \
    grep -v '^#' /tmp/packages.cli-dx | xargs apk add \
    ; fi && \
    echo "#!/bin/sh" >> /usr/bin/pinentry && \
    echo "exit 0" >> /usr/bin/pinentry && \
    chmod +x /usr/bin/pinentry

# DX: Include utilities available in the melange SDK
RUN if [[ "${IMAGE_NAME}" =~ "dx" ]]; then \
    cd /tmp && \
    export PATH="/tmp/go/bin:${PATH}" && \
    # go setup
    export GOPATH="/tmp/go" && \
    mkdir -p "${GOPATH}" && \
    # goimports
    go install golang.org/x/tools/cmd/goimports@latest && \
    mkdir -p "/usr/bin" && \
    mv "${GOPATH}/bin/goimports" "/usr/bin" && \
    # melange
    git clone https://github.com/chainguard-dev/melange.git && \
    (cd melange && make melange install) && \
    # apko
    git clone https://github.com/chainguard-dev/apko.git && \
    (cd apko && make apko install) && \
    # wolfictl
    git clone https://github.com/wolfi-dev/wolfictl.git && \
    (cd wolfictl && make wolfictl install) && \
    # yam
    git clone https://github.com/chainguard-dev/yam.git && \
    (cd yam && go build -v -o "/usr/bin/yam") && \
    cd / && \
    rm -rf /tmp/* \
    ; fi

# Add nix using Nix Determinate Installer 
# https://github.com/DeterminateSystems/nix-installer?tab=readme-ov-file#in-a-container
RUN curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install linux \
    --extra-conf "sandbox = false" \
    --init none \
    --no-confirm
ENV PATH="${PATH}:/nix/var/nix/profiles/default/bin"

# Openrc hack
# https://github.com/gliderlabs/docker-alpine/issues/437#issuecomment-494200575
VOLUME [ "/sys/fs/cgroup" ]

# Openrc hack
RUN mkdir -p /run/openrc && \
    touch /run/openrc/softlevel

# Make nix accessible for non-root user without systemd
RUN addgroup -g 1000 -S 1000 && adduser -u 1000 -S 1000 -G 1000 && \
    chgrp 1000 /nix/var/nix/daemon-socket && \
    chmod ug=rwx,o= /nix/var/nix/daemon-socket && \
    chmod a+rx /etc/init.d/nix-daemon && \
    rc-update add nix-daemon default && \
    rc-status && \
    rc-service nix-daemon start

# Get Distrobox-host-exec and host-spawn
RUN git clone https://github.com/89luca89/distrobox.git --single-branch /tmp/distrobox && \
    cp /tmp/distrobox/distrobox-host-exec /usr/bin/distrobox-host-exec && \
    cp /tmp/distrobox/distrobox-export /usr/bin/distrobox-export && \
    cp /tmp/distrobox/distrobox-init /usr/bin/entrypoint && \
    wget https://github.com/1player/host-spawn/releases/download/$(cat /tmp/distrobox/distrobox-host-exec | grep host_spawn_version= | cut -d "\"" -f 2)/host-spawn-$(uname -m) -O /usr/bin/host-spawn && \
    chmod +x /usr/bin/host-spawn && \
    rm -drf /tmp/distrobox && \
    ln -fs /bin/sh /usr/bin/sh

# Make some symlinks
RUN mkdir -p /usr/local/bin  && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/docker && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/flatpak && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/podman && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/rpm-ostree && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/distrobox && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/just && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/ujust && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/pass && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/pass-otp && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/gpg && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/gpg-agent && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/wl-copy && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/wl-paste && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/wtype && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/fuzzel && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/tailscale && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/systemctl && \
    ln -fs /usr/bin/distrobox-host-exec /usr/local/bin/journalctl && \
    ln -fs /usr/bin/distrobox-host-exec /usr/bin/python && \
    ln -fs /usr/bin/distrobox-host-exec /usr/bin/python3

# Change root shell to BASH
RUN sed -i -e '/^root/s/\/bin\/ash/\/bin\/bash/' /etc/passwd

# Delete nonroot user
RUN userdel nonroot && rm -rf /home/nonroot
